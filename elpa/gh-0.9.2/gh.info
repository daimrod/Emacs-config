This is gh.info, produced by makeinfo version 4.8 from gh.texi.

Generated by Sphinx 1.2.3.
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* gh.el: (gh.info). Using GitHub from Emacs.
END-INFO-DIR-ENTRY

     gh.el 0.3.2, January 26, 2015

     Yann Hodique

     Copyright (C) 2011, Yann Hodique


File: gh.info,  Node: Top,  Next: Basics,  Up: (dir)

gh el User Manual
*****************

     gh.el 0.3.2, January 26, 2015

     Yann Hodique

     Copyright (C) 2011, Yann Hodique

gh.el is a low-level client library to interact with the `GitHub API
<http://developer.github.com/>'.

Main features include:

   * synchronous and asynchronous modes

   * flexible authentication

   * allows for multiple parallel sessions

Contents:

* Menu:

* Basics::
* Issues::
* Indices and tables::


File: gh.info,  Node: Basics,  Next: Issues,  Prev: Top,  Up: Top

1 Basics
********

gh.el is built on top of Eieio. The scope of this client library is to
provide plumbing primitives that will allow full use of the GitHub API.


File: gh.info,  Node: Issues,  Next: Indices and tables,  Prev: Basics,  Up: Top

2 Issues
********

gh.el is built on top of Eieio. The scope of this client library is to
provide plumbing primitives that will allow full use of the GitHub API.

gh.el allows access to GitHub issues.

First, connect to the API:

    (gh-issues-api "api")

This will OAuth connect to GitHub and return an API connection object.

The API connection object can be passed to issues methods:

    (gh-issues-issue-list (gh-issues-api "API") "sigma" "gh.el")

The issue list has a class `gh-api-paged-response' which has a member
`data' which can be used to retrieve the data sent back from GitHub:

    (oref
      (gh-issues-issue-list (gh-issues-api "API") "sigma" "gh.el")
      data)

This returns a list of items of class `gh-issues-issue'. You can
further `oref' those to get data. Putting it all together we might have:

    (defun fill-string (str)
      (with-temp-buffer
        (insert str)
        (fill-paragraph)
        (buffer-string)))

    (mapcar
       (lambda (issue)
         (insert
          (format
           "#%s %s -- %s\n%s\n\n"
           (oref it number) ; the issue number
           (oref it created_at) ; the data
           (fill-string (oref it title)) ; the title, filled
           (fill-string
             (replace-regexp-in-string
                "\r" "\n" (oref it body)))))  ; the body filled
         (oref
          (gh-issues-issue-list ghcon "sigma" "gh.el")
          data)))


File: gh.info,  Node: Indices and tables,  Prev: Issues,  Up: Top

Indices and tables
******************

   * `genindex'

   * `modindex'

   * `search'



Tag Table:
Node: Top295
Ref: index doc482
Ref: 0482
Node: Basics790
Ref: intro basics859
Ref: 1859
Ref: intro doc859
Ref: 2859
Ref: intro welcome-to-gh-el-s-documentation859
Ref: 3859
Node: Issues1022
Ref: issues doc1106
Ref: 41106
Ref: issues issues1106
Ref: 51106
Node: Indices and tables2527
Ref: index indices-and-tables2596
Ref: 62596

End Tag Table
