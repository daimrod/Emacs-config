* Library of Babel
(from [[info:org#Library%20of%20Babel][info:org#Library of Babel]])

The ‚ÄúLibrary of Babel‚Äù consists of code blocks that can be called from any Org mode file. Code blocks defined in the ‚ÄúLibrary of Babel‚Äù can be called remotely as if they were in the current Org mode buffer (see *note Evaluating code blocks:: for information on the syntax of remote code block evaluation).

The central repository of code blocks in the ‚ÄúLibrary of Babel‚Äù is housed in an Org mode file located in the ‚Äòdoc‚Äô directory of Org mode.

Users can add code blocks they believe to be generally useful to their ‚ÄúLibrary of Babel.‚Äù The code blocks can be stored in any Org mode file and then loaded into the library with ‚Äòorg-babel-lob-ingest‚Äô.

Code blocks located in any Org mode file can be loaded into the ‚ÄúLibrary of Babel‚Äù with the ‚Äòorg-babel-lob-ingest‚Äô function, bound to ‚ÄòC-c C-v i‚Äô.

* attr_wrap
Cette fonction permet d'ajouter des attributs lors de l'export d'image vers du LaTeX.

#+NAME: attr_wrap
#+BEGIN_SRC emacs-lisp :var data="[[file]]" :var paperwidth="0.8" :var textheight="" :var options="" :var caption="" :var name="" :results raw :exports none :eval no-export
(format "%s%s#+ATTR_LaTeX: :width %s\\paperwidth :height %s\\textheight :options keepaspectratio %s
%s"
        (if (string= "" caption) "" (format "#+CAPTION: %s\n" caption))
        (if (string= "" name) "" (format "#+NAME: %s\n" name))
        paperwidth textheight options data)
#+END_SRC

En voici un exemple d'utilisation :

#+BEGIN_SRC dot :file /tmp/schema-2.svg :cmdline -Kdot -Tsvg :exports results :eval no-export :post attr_wrap(data=*this*,paperwidth=0.6,textheight=0.2) :results drawer
graph G {
  rankdir=LR;
  A [shape=box, label="Article
A"];
  B [shape=box, label="Article
B"];
  A -- B [label="???"];
}
#+END_SRC

#+RESULTS:
:RESULTS:
#+ATTR_LaTeX: :width 0.6\paperwidth :height 0.2\textheight :options keepaspectratio 
[[file:/tmp/schema-2.svg]]
:END:

* extract_variable                                                      :WIP:
:PROPERTIES:
:ID:       4gd6gjc16zg0
:END:
Ce filtre extrait toutes les variables en rep√©rant les affectations ou les d√©finitions.
Exemples de d√©finitions :
- X=Y
- X : Y

#+NAME: extract_variables
#+BEGIN_SRC emacs-lisp :exports none :var data="" :var extract_var=""
(with-temp-buffer
  (insert data)
  (lob-extract-variables extract_var (current-buffer)))
#+END_SRC

#+RESULTS: extract_variables

On l'utilise de la fa√ßon suivante :
#+NAME: test_extract_variables_1
#+BEGIN_SRC sh :post extract_variables(data=*this*, extract_var="stderr") :cache yes :results output
echo "Ceci est un test"
echo "Ceci est un super test"
echo "     FOO_bar-asdf : value"
echo " FOO_bar-asdf = value"
echo "stderr:/temp_dd/igrida-fs1/gjadi/OAR_%jobid%.stderrls"
#+END_SRC

#+RESULTS[814de10c731ee52b58719f5f02e47969472debbd]: test_extract_variables_1
: /temp_dd/igrida-fs1/gjadi/OAR_%jobid%.stderrls

#+NAME: test_extract_variables_2
#+BEGIN_SRC sh :post extract_variables(data=*this*) :cache yes :results output
echo "Ceci est un test"
echo "Ceci est un super test"
echo "     FOO_bar-asdf : value"
echo " FOO_bar-asdf = value"
echo "stderr:/temp_dd/igrida-fs1/gjadi/OAR_%jobid%.stderrls"
#+END_SRC

#+RESULTS[8b48cd11d9dec3f78b5c3429e2f0bb9d87366491]: test_extract_variables_2
| FOO_bar-asdf | value                                          |
| FOO_bar-asdf | value                                          |
| stderr       | /temp_dd/igrida-fs1/gjadi/OAR_%jobid%.stderrls |

Par la suite, on peut r√©cup√©rer les r√©sultats comme ceci :
#+BEGIN_SRC emacs-lisp :var AL=test_extract_variables_2
(assoc "stderr" AL)
#+END_SRC

#+RESULTS[361b8149afcbda9965f54a8a3d88da62ca100c1f]:
| stderr | /temp_dd/igrida-fs1/gjadi/OAR_%jobid%.stderrls |

* ansi_color
Converti les s√©quences d'√©chappement shell pour la couleurs en text-properties emacs.

#+NAME: ansi_color
#+BEGIN_SRC emacs-lisp :var data=""
(ansi-color-apply data)
#+END_SRC

#+NAME: test_no_ansi_color
#+BEGIN_SRC bash :results pp
ls --color | head
#+END_SRC

#+RESULTS: test_no_ansi_color
#+begin_example
[0m[01;34mauto-save-list[0m
bookmarks
[01;34mconfig[0m
custom.el
[01;34mdoc[0m
ede-projects.el
[01;34melfeed[0m
[01;34melisp[0m
[01;34memms[0m
[01;34meshell[0m
#+end_example

#+NAME: test_ansi_color
#+BEGIN_SRC bash :results pp :post ansi_color(data=*this*)
ls --color | head
#+END_SRC

#+RESULTS: test_ansi_color
#+begin_example
auto-save-list
bookmarks
config
custom.el
doc
ede-projects.el
elfeed
elisp
emms
eshell
#+end_example
